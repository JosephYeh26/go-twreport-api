# go-api webservice CircleCI 2.0 configuration file
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: thereporter/circleci-go-api:1.10-alpine3.8
      - image: circleci/mongo:3.2
      - image: circleci/mysql:5.7
        environment:
          MYSQL_DATABASE: gorm
          MYSQL_HOST: localhost
          MYSQL_USER: gorm
          MYSQL_PASSWORD: gorm
          MYSQL_ROOT_HOST: "%"

    working_directory: /go/src/twreporter.org/go-api

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - dependencies-{{ checksum "glide.lock" }}
          # fallback to using the latest cache if no exact match is found
          - dependencies-

      - run: glide install

      - save_cache:
          paths:
            - vendor
          key: dependencies-{{ checksum "glide.lock" }}

      # run tests!
      - run: go test $(glide novendor)
      - run:
          name: Save pkg version to a file
          command: go run ./.circleci/scripts/read-changelog.go > .pkg-version

      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - persist_to_workspace:
          root: /go/src/twreporter.org/go-api
          paths:
            - ./*

  deploy:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          name: Connect to container cluster
          command: |
            # GOOGLE_AUTH, GOOGLE_PROJECT_ID, GOOGLE_COMPUTE_ZONE,
            # GOOGLE_STAGING_CLUSTER_NAME and GOOGLE_CLUSTER_NAME
            # is defined in Environment Variables of circleci project
            echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            CLUSTER_NAME=""

            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              CLUSTER_NAME=${GOOGLE_STAGING_CLUSTER_NAME}
            fi

            if [ "${CIRCLE_BRANCH}" == "release" ]; then
              CLUSTER_NAME=${GOOGLE_CLUSTER_NAME}
            fi

            echo "CLUSTER_NAME: ${CLUSTER_NAME}"
            gcloud --quiet container clusters get-credentials $CLUSTER_NAME
      - setup_remote_docker
      
      - attach_workspace:
          at: /go/src/twreporter.org/go-api

      - run:
          name: Build, push and deploy Docker image
          command: |
            cd /go/src/twreporter.org/go-api
            PKG_VER=""
            DEPLOYMENT="go-api"
            CONTAINER="go-api"

            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              # pkg version for staging
              PKG_VER="staging-$(cat .pkg-version)-$CIRCLE_BUILD_NUM"
            fi
            
            if [ "${CIRCLE_BRANCH}" == "release" ]; then
              # pkg version for release
              PKG_VER="$(cat .pkg-version)"
            fi

            # aws config
            echo ${AWS_CREDENTIALS} | base64 -i --decode > ./aws_credentials

            docker build -t gcr.io/coastal-run-106202/go-api:$PKG_VER .
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
            docker push gcr.io/coastal-run-106202/go-api:$PKG_VER
            kubectl set image deployment ${DEPLOYMENT} ${CONTAINER}=gcr.io/coastal-run-106202/go-api:$PKG_VER --record
            kubectl rollout status deployment ${DEPLOYMENT}

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - release
                - staging
